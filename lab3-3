
#include <stdio.h>
#include <stdlib.h>

#define CAPACITY 10  
typedef struct {
    int vec[CAPACITY];
    int front;  
    int rear;   
    int size;   
} Deque;
void initDeque(Deque* dq) {
    dq->front = -1;
    dq->rear = 0;
    dq->size = 0;
}
int isFull(Deque* dq) {
    return dq->size == CAPACITY;
}
int isEmpty(Deque* dq) {
    return dq->size == 0;
}
void insertFront(Deque* dq, int key) {
    if (isFull(dq)) {
        printf("Nu se poate insera elementul %d la început.\n", key);
        return;
    }

    if (dq->front == -1) {
        dq->front = 0;
        dq->rear = 0;
    } else if (dq->front == 0) {
        dq->front = CAPACITY - 1;
    } else {
        dq->front--;
    }

    dq->vec[dq->front] = key;
    dq->size++;
}
void insertRear(Deque* dq, int key) {
    if (isFull(dq)) {
        printf("Nu se poate insera elementul %d la sfârșit.\n", key);
        return;
    }

    if (dq->front == -1) {
        dq->front = 0;
        dq->rear = 0;
    } else if (dq->rear == CAPACITY - 1) {
        dq->rear = 0;
    } else {
        dq->rear++;
    }

    dq->vec[dq->rear] = key;
    dq->size++;
}
int deleteFront(Deque* dq) {
    if (isEmpty(dq)) {
        printf("Coada este goală! Nu se poate șterge elementul din față.\n");
        return -1;
    }

    int elem = dq->vec[dq->front];

    if (dq->front == dq->rear) {
        dq->front = -1;
        dq->rear = -1;
    } else if (dq->front == CAPACITY - 1) {
        dq->front = 0;
    } else {
        dq->front++;
    }

    dq->size--;
    return elem;
}

int deleteRear(Deque* dq) {
    if (isEmpty(dq)) {
        printf("Coada este goală! Nu se poate șterge elementul din spate.\n");
        return -1;
    }

    int elem = dq->vec[dq->rear];

    if (dq->front == dq->rear) {
        dq->front = -1;
        dq->rear = -1;
    } else if (dq->rear == 0) {
        dq->rear = CAPACITY - 1;
    } else {
        dq->rear--;
    }

    dq->size--;
    return elem;
}
void printDeque(Deque* dq) {
    if (isEmpty(dq)) {
        printf("Coada este goală!\n");
        return;
    }
    printf("Elementele din deque: ");
    int i = dq->front;
    while (1) {
        printf("%d ", dq->vec[i]);
        if (i == dq->rear) {
            break;
        }
        i = (i + 1) % CAPACITY;
    }
    printf("\n");
}

int main() {
    Deque dq;

    initDeque(&dq);
    insertRear(&dq, 10);
    insertRear(&dq, 20);
    insertFront(&dq, 5);
    insertFront(&dq, 3);

    printDeque(&dq);

    int elem = deleteFront(&dq);
    if (elem != -1) {
        printf("Element scos din față: %d\n", elem);
    }

    elem = deleteRear(&dq);
    if (elem != -1) {
        printf("Element scos din spate: %d\n", elem);
    }

    printDeque(&dq);

    return 0;
}
